name: web_project-dev

x-default-dns: &default-dns
  dns:
    - ${COMPOSE_DNS1:-1.1.1.1}
    - ${COMPOSE_DNS2:-8.8.8.8}

services:
  frontend:
    <<: *default-dns
    build:
      context: ../..
      dockerfile: infra/docker/frontend/Dockerfile.dev
      args:
        USER_ID: ${LOCAL_UID:-1000}
        GROUP_ID: ${LOCAL_GID:-1000}
    # Keep dev server available on 5173 for direct access by developers
    ports:
      - "5173:5173"
    env_file:
      - ../../frontend/.env.development
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://backend:8080
    volumes:
      - ../../frontend:/workspace
      - frontend-node-modules:/workspace/node_modules
      - frontend-pnpm-store:/home/app/.pnpm-store
    depends_on:
      backend:
        condition: service_started
    networks:
      - web-net

  # Optional: build frontend dist continuously and share with Nginx
  fe-builder:
    <<: *default-dns
    build:
      context: ../..
      dockerfile: infra/docker/frontend/Dockerfile.dev
      args:
        USER_ID: ${LOCAL_UID:-1000}
        GROUP_ID: ${LOCAL_GID:-1000}
    working_dir: /workspace
    command: sh -c "pnpm install && pnpm build --watch"
    env_file:
      - ../../frontend/.env.development
    environment:
      NODE_ENV: development
    volumes:
      - ../../frontend:/workspace
      - frontend-node-modules:/workspace/node_modules
      - frontend-pnpm-store:/home/app/.pnpm-store
      - frontend-dist:/workspace/dist
    depends_on:
      backend:
        condition: service_started
    networks:
      - web-net

  backend:
    <<: *default-dns
    build:
      context: ../..
      dockerfile: infra/docker/backend/Dockerfile.dev
      args:
        USER_ID: ${LOCAL_UID:-1000}
        GROUP_ID: ${LOCAL_GID:-1000}
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/appdb?useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: app_pw
    volumes:
      - ../../backend:/workspace
      - gradle-cache:/workspace/.gradle
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - web-net

  mysql:
    <<: *default-dns
    build:
      context: ../..
      dockerfile: infra/docker/mysql/Dockerfile
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_pw
      MYSQL_DATABASE: appdb
      MYSQL_USER: app
      MYSQL_PASSWORD: app_pw
    volumes:
      - mysql-data-dev:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s
    networks:
      - web-net

  nginx:
    <<: *default-dns
    build:
      context: ../..
      dockerfile: infra/docker/nginx/Dockerfile.dev
    ports:
      - "8081:80"
    env_file:
      - ../nginx/.env.development
    volumes:
      - ../nginx/default.dev.conf:/etc/nginx/templates/default.conf.template:ro
      - ../nginx/proxy-headers.conf:/etc/nginx/snippets/proxy-headers.conf:ro
      - certbot-dev:/var/www/certbot
      - frontend-dist:/usr/share/nginx/html:ro
    depends_on:
      backend:
        condition: service_started
    networks:
      - web-net

networks:
  web-net:
    driver: bridge

volumes:
  frontend-node-modules:
  frontend-pnpm-store:
  gradle-cache:
  mysql-data-dev:
  certbot-dev:
  frontend-dist:
