name: web_project
services:
  frontend:
    build:
      context: ../..
      dockerfile: infra/docker/frontend/Dockerfile.prod
      args:
        USER_ID: ${LOCAL_UID:-1000}
        GROUP_ID: ${LOCAL_GID:-1000}
    env_file:
      - ../../frontend/.env.production
    environment:
      NODE_ENV: production
    volumes:
      - ${HOME}/srv/web_project/frontend/dist:/workspace/dist
      - frontend-pnpm-store-prod:/home/app/.pnpm-store
    expose:
      - "5173"
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
    networks:
      - web-net

  backend:
    build:
      context: ../..
      dockerfile: infra/docker/backend/Dockerfile.prod
      args:
        USER_ID: ${LOCAL_UID:-1000}
        GROUP_ID: ${LOCAL_GID:-1000}
    env_file:
      - ../../backend/.env.production
    environment:
      JAVA_OPTS: -Xms512m -Xmx512m
    volumes:
      - ${HOME}/srv/web_project/backend/logs:/app/logs
      - ${HOME}/srv/web_project/backend/config:/app/config:ro
    expose:
      - "8080"
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - web-net

  mysql:
    build:
      context: ../..
      dockerfile: infra/docker/mysql/Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-change_me}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-appdb}
      MYSQL_USER: ${MYSQL_USER:-app}
      MYSQL_PASSWORD: ${MYSQL_APP_PASSWORD:-change_me}
    volumes:
      - ${HOME}/srv/web_project/mysql/data:/var/lib/mysql
      - ${HOME}/srv/web_project/mysql/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    networks:
      - web-net

  nginx:
    build:
      context: ../..
      dockerfile: infra/docker/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ../nginx/.env.production
    volumes:
      - ../nginx/default.conf:/etc/nginx/templates/default.conf.template:ro
      - ../nginx/proxy-headers.conf:/etc/nginx/snippets/proxy-headers.conf:ro
      - ${HOME}/srv/web_project/frontend/dist:/usr/share/nginx/html:ro
      - ${HOME}/srv/web_project/certbot:/var/www/certbot
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    restart: unless-stopped
    networks:
      - web-net

networks:
  web-net:
    driver: bridge

volumes:
  frontend-pnpm-store-prod:
