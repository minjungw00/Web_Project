map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  listen 80;
  listen [::]:80;
  server_name ${NGINX_SERVER_NAME};

  location ^~ /.well-known/acme-challenge/ {
    root ${NGINX_CERTBOT_ROOT};
    try_files $uri =404;
  }

  # Health endpoint used by container healthcheck
  location = /healthz {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name ${NGINX_SERVER_NAME};

  ssl_certificate ${NGINX_SSL_CERT};
  ssl_certificate_key ${NGINX_SSL_CERT_KEY};
  ssl_trusted_certificate ${NGINX_SSL_TRUSTED_CERT};

  ssl_session_timeout 1d;
  ssl_session_cache shared:MozSSL:10m;
  ssl_session_tickets off;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers off;
  http2 on;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  location ^~ /.well-known/acme-challenge/ {
    root ${NGINX_CERTBOT_ROOT};
    try_files $uri =404;
  }

  # Health endpoint used by container healthcheck (HTTPS)
  location = /healthz {
    return 200 'ok';
    add_header Content-Type text/plain;
  }

  root ${NGINX_STATIC_ROOT};
  index index.html;

  # Static files served directly by Nginx; otherwise fallback to SPA index
  location ~* \.(js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
    expires ${NGINX_STATIC_CACHE_EXPIRES};
    add_header Cache-Control "${NGINX_STATIC_CACHE_CONTROL}" always;
    try_files $uri /index.html;
  }

  location /api/ {
    proxy_pass http://${NGINX_BACKEND_HOST}:${NGINX_BACKEND_PORT};
    include /etc/nginx/snippets/proxy-headers.conf;
  }

  location / {
    try_files $uri /index.html;
  }
}
