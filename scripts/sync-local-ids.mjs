#!/usr/bin/env node
import { writeFileSync, mkdirSync } from "node:fs";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = resolve(__dirname, "..");
const dockerDir = resolve(projectRoot, "infra", "docker");
const envFilePath = resolve(dockerDir, ".env.local");

const toInteger = (value, defaultValue) => {
  if (typeof value === "number" && Number.isInteger(value)) {
    return value;
  }
  if (typeof value === "string" && value.trim().length > 0) {
    const parsed = Number.parseInt(value, 10);
    if (Number.isInteger(parsed) && parsed >= 0) {
      return parsed;
    }
  }
  return defaultValue;
};

const determineUid = () => {
  if (process.env.LOCAL_UID) {
    return toInteger(process.env.LOCAL_UID, 1000);
  }
  if (typeof process.getuid === "function") {
    return toInteger(process.getuid(), 1000);
  }
  if (process.env.SUDO_UID) {
    return toInteger(process.env.SUDO_UID, 1000);
  }
  return 1000;
};

const determineGid = () => {
  if (process.env.LOCAL_GID) {
    return toInteger(process.env.LOCAL_GID, 1000);
  }
  if (typeof process.getgid === "function") {
    return toInteger(process.getgid(), 1000);
  }
  if (process.env.SUDO_GID) {
    return toInteger(process.env.SUDO_GID, 1000);
  }
  return 1000;
};

const uid = determineUid();
const gid = determineGid();

mkdirSync(dockerDir, { recursive: true });

const header = "# Generated by scripts/sync-local-ids.mjs. Do not commit.\n";
const body = `LOCAL_UID=${uid}\nLOCAL_GID=${gid}\n`;
writeFileSync(envFilePath, `${header}${body}`, { encoding: "utf8" });

console.info(`Wrote LOCAL_UID=${uid}, LOCAL_GID=${gid} to ${envFilePath}`);
